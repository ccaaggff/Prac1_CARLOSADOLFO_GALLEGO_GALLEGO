from multiprocessing import Process, Manager
from multiprocessing import BoundedSemaphore, Semaphore, Lock
from multiprocessing import current_process
from multiprocessing import Array

import random
from random import random, randint

NPROD = 3
NCONS = 1

N = 50
K = 1

def add_data(stor, pid, mutex):
    mutex.acquire()
    try:
        stor[pid] += randint(0,5)
    finally:
        mutex.release()

def producer(stor, s, empty, non_empty, mutex):
    for j in range(N):
        print (f"producer {current_process().name} is producing..")
        empty.acquire()
        add_data(stor, int(current_process().name.split('_')[1]), mutex)
        non_empty.release()
        print (f"producer {current_process().name} stored")
    mutex.acquire()
    stor[int(current_process().name.split('_')[1])] = -1

def consumer(stor, s, empty, non_empty, mutex):
    act = [True for _ in range(NPROD)]

    for non_emptie in non_empty:
        non_emptie.acquire()
    
    while True in act:
        mini, inde = get_lowest(stor, mutex, act)
        print ("consumer out of stock...")
        s.append(mini)
        print (f"consumer is consuming {mini}")
        empty[inde].release()
        non_empty[inde].acquire()
        
        if list(stor) == [-1 for i in range(NPROD)]:
            act = [False for k in range(NPROD)]

def get_lowest(stor, mutex, act):
    mutex.acquire()
    try:
        min_ = min([stor[i] for i in range(NPROD) if (stor[i] != -1)])
        stored = list(stor)
        for i in range(NPROD):
            if stor[i] == -1:
                act[i] = False
    finally:
        mutex.release()
    return min_, stored.index(min_)

def main():
    stor = Array('i', NPROD*K)

    empty = [BoundedSemaphore(K) for j in range(NPROD)]
    non_empty = [Semaphore(0) for k in range(NPROD)]
    mutex = Lock()
    manager = Manager()
    s = manager.list()

    prodlst = [Process(target=producer, name=f'prod_{i}', args=(stor, s, empty[i], non_empty[i], mutex)) for i in range(NPROD)]
    conslst = [Process(target=consumer, name="cons", args=(stor, s, empty, non_empty, mutex))]
    
    for p in prodlst + conslst:
        p.start()
    
    for p in prodlst + conslst:
        p.join()

if __name__ == '__main__':
    main()
